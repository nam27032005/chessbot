# chess_openings.py

import chess

# Thế khai cuộc (Opening)
# Định dạng: (nước đi trắng, nước đi đen)
OPENINGS = {
    # Ưu tiên khi bot cầm quân đen
    "Italian Game (C50)": [
        ("e4", "e5"),
        ("Nf3", "Nc6"),
        ("Bc4", "Nf6"),
        ("d4", "exd4")
    ],
    "Queen's Gambit Declined (D30)": [
        ("d4", "d5"),
        ("c4", "e6"),
        ("Nc3", "Nf6"),
        ("Bg5", "Be7")
    ],
    # Ưu tiên khi bot cầm quân trắng
    "King's Gambit Accepted (C33)": [
        ("e4", "e5"),
        ("f4", "exf4"),
        ("Nf3", "d5"),
        ("exd5", "Nf6")
    ],
    "Queen's Gambit (D06)": [
        ("d4", "d5"),
        ("c4", "dxc4"),
        ("e3", "Nf6"),
        ("Bxc4", "e6")
    ],
    # Các thế khai cuộc khác
    "Sicilian Defense (B20)": [
        ("e4", "c5"),
        ("Nf3", "d6"),
        ("d4", "cxd4"),
        ("Nxd4", "Nf6")
    ],
    "French Defense (C00)": [
        ("e4", "e6"),
        ("d4", "d5"),
        ("Nc3", "Nf6"),
        ("Bg5", "Be7")
    ],
    "Caro-Kann Defense (B10)": [
        ("e4", "c6"),
        ("d4", "d5"),
        ("Nc3", "dxe4"),
        ("Nxe4", "Bf5")
    ],
    "Queen's Gambit Accepted (D20)": [
        ("d4", "d5"),
        ("c4", "dxc4"),
        ("e3", "Nf6"),
        ("Bxc4", "e6")
    ],
    "Slav Defense (D10)": [
        ("d4", "d5"),
        ("c4", "c6"),
        ("Nf3", "Nf6"),
        ("Nc3", "dxc4")
    ],
    "King's Indian Defense (E60)": [
        ("d4", "Nf6"),
        ("c4", "g6"),
        ("Nc3", "Bg7"),
        ("e4", "d6")
    ],
    "Nimzo-Indian Defense (E20)": [
        ("d4", "Nf6"),
        ("c4", "e6"),
        ("Nc3", "Bb4"),
        ("e3", "c5")
    ],
    "Grünfeld Defense (D80)": [
        ("d4", "Nf6"),
        ("c4", "g6"),
        ("Nc3", "d5"),
        ("cxd5", "Nxd5")
    ],
    "London System (D02)": [
        ("d4", "d5"),
        ("Nf3", "Nf6"),
        ("Bf4", "e6"),
        ("e3", "Bd6")
    ],
    "Colle System (D05)": [
        ("d4", "d5"),
        ("Nf3", "Nf6"),
        ("e3", "e6"),
        ("Bd3", "c5")
    ],
    "English Opening (A20)": [
        ("c4", "e5"),
        ("Nc3", "Nf6"),
        ("g3", "d5"),
        ("cxd5", "Nxd5")
    ],
    "Réti Opening (A04)": [
        ("Nf3", "d5"),
        ("c4", "d4"),
        ("b3", "e5"),
        ("Bb2", "Nc6")
    ]
}

# Danh sách nước đi khai cuộc cơ bản khi bot cầm quân đen
BASIC_BLACK_OPENINGS = ["e5", "d5", "Nf6", "c5", "e6", "d6", "g6"]

# Danh sách nước đi khai cuộc cơ bản khi bot cầm quân trắng
BASIC_WHITE_OPENINGS = ["e4", "d4", "Nf3", "c4"]

# Mẫu chiến thuật trung cuộc (Middlegame)
# Định dạng: (FEN, nước đi tốt, mô tả)
MIDDLEGAME_PATTERNS = [
    # Đòn phối hợp: Đánh đôi (Fork) bằng mã
    (
        "rnbqkb1r/pppp1ppp/5n2/5p2/5P2/5N2/PPPP1PPP/RNBQKB1R w KQkq - 0 2",
        "Ne5",
        "Mã đánh đôi, đe dọa bắt hậu và xe"
    ),
    # Tấn công vua: Đưa hậu vào h5 để đe dọa chiếu hết
    (
        "rnbqkb1r/pppp1ppp/5n2/4p3/4P3/5N2/PPPP1PPP/RNBQKB1R w KQkq - 0 2",
        "Qh5",
        "Đưa hậu vào h5, đe dọa chiếu hết ở f7"
    )
]

# Thế cờ tàn cuộc (Endgame)
# Định dạng: (FEN, chiến lược, mô tả)
ENDGAME_POSITIONS = [
    # Vua + Hậu vs Vua: Đưa vua đối phương ra rìa
    (
        "8/8/8/8/8/8/5Qk1/6K1 w - - 0 1",
        "Qh2",
        "Đưa vua đen ra rìa để chiếu hết"
    ),
    # Vua + Xe vs Vua: Đưa vua đối phương ra rìa
    (
        "8/8/8/8/8/8/5Rk1/6K1 w - - 0 1",
        "Rh2",
        "Đưa vua đen ra rìa để chiếu hết"
    ),
    # Đẩy tốt để phong hậu
    (
        "8/8/8/8/8/6P1/5K2/6k1 w - - 0 1",
        "g4",
        "Đẩy tốt để phong hậu"
    )
]

def get_opening_move(board):
    """Tra cứu nước đi khai cuộc từ danh sách thế khai cuộc."""
    moves = board.move_stack
    if not moves:
        # Nếu bot cầm quân trắng và chưa có nước đi nào, ưu tiên King's Gambit hoặc Queen's Gambit
        if board.turn == chess.WHITE:
            preferred_openings = ["King's Gambit Accepted (C33)", "Queen's Gambit (D06)"]
            for opening_name in preferred_openings:
                opening_moves = OPENINGS[opening_name]
                next_move = opening_moves[0][0]  # Nước đi đầu tiên của trắng
                try:
                    # Kiểm tra xem nước đi có hợp lệ không trước khi trả về
                    move = board.parse_san(next_move)
                    if move in board.legal_moves:
                        return move
                except:
                    continue
            # Nếu không tìm thấy, chọn một nước đi cơ bản
            for move in BASIC_WHITE_OPENINGS:
                try:
                    move_obj = board.parse_san(move)
                    if move_obj in board.legal_moves:
                        return move_obj
                except:
                    continue
        return None

    # Tạo một bàn cờ tạm để tái hiện các nước đi
    temp_board = chess.Board()
    move_str = ""

    # Tái hiện các nước đi đã thực hiện
    for move in moves:
        move_san = temp_board.san(move)  # Sử dụng temp_board.san() để lấy ký hiệu SAN
        temp_board.push(move)
        move_str += move_san + " "

    move_str = move_str.strip()

    # Ưu tiên Italian Game và Queen's Gambit Declined khi bot cầm quân đen
    preferred_openings = ["Italian Game (C50)", "Queen's Gambit Declined (D30)"]
    other_openings = [name for name in OPENINGS.keys() if name not in preferred_openings]

    # Nếu bot cầm quân đen và trắng vừa đi e4, bắt buộc đi e5 (Italian Game)
    if not board.turn and len(moves) == 1:
        check_board = chess.Board()  # Sử dụng một bản sao mới để kiểm tra
        move_san = check_board.san(moves[0])
        if move_san == "e4":
            try:
                move = board.parse_san("e5")
                if move in board.legal_moves:
                    return move
            except:
                pass

    # Nếu bot cầm quân đen và trắng vừa đi d4, đi d5 (Queen's Gambit Declined)
    if not board.turn and len(moves) == 1:
        check_board = chess.Board()  # Sử dụng một bản sao mới để kiểm tra
        move_san = check_board.san(moves[0])
        if move_san == "d4":
            try:
                move = board.parse_san("d5")
                if move in board.legal_moves:
                    return move
            except:
                pass

    # Tra cứu thế khai cuộc
    for opening_name in preferred_openings + other_openings:
        opening_moves = OPENINGS[opening_name]
        # Tạo chuỗi nước đi từ danh sách OPENINGS
        opening_str = " ".join([move[0] for i, move in enumerate(opening_moves) if i < len(moves)])
        # Kiểm tra xem chuỗi nước đi của trắng có khớp với thế khai cuộc không
        if move_str == opening_str:
            # Lấy nước đi tiếp theo của đen
            next_move_index = len(moves)
            if next_move_index < len(opening_moves):
                next_move = opening_moves[next_move_index][1]
                try:
                    move = board.parse_san(next_move)
                    if move in board.legal_moves:
                        return move
                except:
                    continue
        else:
            # Nếu không khớp hoàn toàn, kiểm tra từng nước đi của trắng
            white_moves = [move[0] for move in opening_moves]
            current_white_moves = [move for i, move in enumerate(move_str.split()) if i % 2 == 0]
            if len(current_white_moves) <= len(white_moves) and current_white_moves == white_moves[:len(current_white_moves)]:
                # Nếu các nước đi của trắng khớp, lấy nước đi tiếp theo của đen
                next_move_index = len(moves)
                if next_move_index < len(opening_moves):
                    next_move = opening_moves[next_move_index][1]
                    try:
                        move = board.parse_san(next_move)
                        if move in board.legal_moves:
                            return move
                    except:
                        continue

    # Nếu không tìm thấy thế khai cuộc, chọn một nước đi cơ bản
    if not board.turn:  # Bot cầm quân đen
        for move in BASIC_BLACK_OPENINGS:
            try:
                move_obj = board.parse_san(move)
                if move_obj in board.legal_moves:
                    return move_obj
            except:
                continue
    else:  # Bot cầm quân trắng
        for move in BASIC_WHITE_OPENINGS:
            try:
                move_obj = board.parse_san(move)
                if move_obj in board.legal_moves:
                    return move_obj
            except:
                continue

    # Nếu không tìm thấy nước đi hợp lệ, trả về nước đi hợp lệ đầu tiên
    legal_moves = list(board.legal_moves)
    if legal_moves:
        return legal_moves[0]

    return None

def get_middlegame_move(board):
    """Nhận diện mẫu chiến thuật trung cuộc và trả về nước đi tốt."""
    current_fen = board.fen()
    for fen, move, _ in MIDDLEGAME_PATTERNS:
        if current_fen == fen:
            try:
                return board.parse_san(move)
            except:
                continue
    return None

def get_endgame_move(board):
    """Nhận diện thế cờ tàn cuộc và trả về nước đi tốt."""
    current_fen = board.fen()
    for fen, move, _ in ENDGAME_POSITIONS:
        if current_fen == fen:
            try:
                return board.parse_san(move)
            except:
                continue
    return None