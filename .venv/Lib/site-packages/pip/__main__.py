import chess
import random
import tkinter as tk
from tkinter import messagebox
from PIL import Image, ImageTk

class ChessGame:
    def __init__(self, root):
        self.root = root
        self.root.title("Chess Bot")
        self.board = chess.Board()
        self.selected_square = None
        self.piece_images = {}
        self.load_images()

        # Tạo giao diện
        self.canvas = tk.Canvas(self.root, width=480, height=480)
        self.canvas.pack()
        self.canvas.bind("<Button-1>", self.player_move)

        self.reset_button = tk.Button(self.root, text="Reset", command=self.reset_board)
        self.reset_button.pack()

        self.update_board()

    def load_images(self):
        pieces = ['P', 'R', 'N', 'B', 'Q', 'K']
        colors = ['w', 'b']
        for color in colors:
            for piece in pieces:
                symbol = f"{color}{piece}"
                image_path = f"C:/Users/ADMIN/PycharmProjects/chessbot/pieces/{symbol}.png"
                try:
                    image = Image.open(image_path)
                    image = image.resize((60, 60), Image.Resampling.LANCZOS)
                    self.piece_images[symbol] = ImageTk.PhotoImage(image)
                except FileNotFoundError:
                    print(f"Error: Could not find image file {image_path}")
                    exit(1)
                except Exception as e:
                    print(f"Error loading image {image_path}: {e}")
                    exit(1)

    def bot_move(self):
        if not self.board.is_game_over():
            legal_moves = list(self.board.legal_moves)
            if legal_moves:
                move = random.choice(legal_moves)
                self.board.push(move)
                self.update_board()
                if self.board.is_game_over():
                    self.end_game()

    def update_board(self):
        self.canvas.delete("all")
        for square in chess.SQUARES:
            file = chess.square_file(square)
            rank = 7 - chess.square_rank(square)
            color = "white" if (file + rank) % 2 == 0 else "gray"
            x1, y1 = file * 60, rank * 60
            self.canvas.create_rectangle(x1, y1, x1 + 60, y1 + 60, fill=color)

            piece = self.board.piece_at(square)
            if piece:
                piece_symbol = piece.symbol()
                color_prefix = 'w' if piece_symbol.isupper() else 'b'
                piece_type = piece_symbol.upper()
                image_key = f"{color_prefix}{piece_type}"
                if image_key in self.piece_images:
                    self.canvas.create_image(x1 + 30, y1 + 30, image=self.piece_images[image_key])
                else:
                    print(f"Warning: Image for {image_key} not loaded")

    def player_move(self, event):
        if not self.board.is_game_over():
            x, y = event.x // 60, 7 - (event.y // 60)
            square = chess.square(x, y)

            if self.selected_square is None:
                if self.board.piece_at(square) and self.board.piece_at(square).color == self.board.turn:
                    self.selected_square = square
            else:
                move = chess.Move(self.selected_square, square)
                if move in self.board.legal_moves:
                    self.board.push(move)
                    self.update_board()
                    self.selected_square = None
                    if not self.board.is_game_over():
                        self.bot_move()
                    else:
                        self.end_game()
                else:
                    self.selected_square = None

    def end_game(self):
        result = self.board.result()
        if result == "1-0":
            messagebox.showinfo("Game Over", "White wins!")
        elif result == "0-1":
            messagebox.showinfo("Game Over", "Black wins!")
        else:
            messagebox.showinfo("Game Over", "Draw!")
        self.reset_board()

    def reset_board(self):
        self.board = chess.Board()
        self.selected_square = None
        self.update_board()

# Tạo giao diện và chạy chương trình
root = tk.Tk()
game = ChessGame(root)
root.mainloop()